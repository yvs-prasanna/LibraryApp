{"ast":null,"code":"var _jsxFileName = \"C:\\\\Personal\\\\React Projects\\\\flaerhome\\\\my-frontend\\\\src\\\\components\\\\BookDetails\\\\index.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DataFetchingComponent = () => {\n  _s();\n  const [data, setData] = useState([]); // State to hold the fetched data\n  const [loading, setLoading] = useState(true); // State to manage loading state\n  const [error, setError] = useState(null); // State to handle errors\n  const {\n    match\n  } = useParams();\n  console.log(match);\n  useEffect(() => {\n    // Define an async function to fetch data\n    const fetchData = async () => {\n      try {\n        const response = await fetch(\"https://api.example.com/data\"); // Replace with your API endpoint\n        if (!response.ok) {\n          throw new Error(\"Failed to fetch data\");\n        }\n        const result = await response.json(); // Parse the JSON data\n        setData(result); // Update the state with fetched data\n      } catch (error) {\n        setError(error.message); // Set error if fetch fails\n      } finally {\n        setLoading(false); // Set loading to false after data is fetched\n      }\n    };\n    fetchData(); // Call the fetch function when the component mounts\n  }, []); // The empty array ensures the effect runs only once (on component mount)\n\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 23\n  }, this); // Show loading state\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Error: \", error]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 21\n  }, this); // Show error message\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Fetched Data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: data.map((item, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: item.name\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }, this) // Render the data (modify based on your API structure)\n      )\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n_s(DataFetchingComponent, \"1B4spDv8UzG2r4vIpdJ8YTklFEI=\", false, function () {\n  return [useParams];\n});\n_c = DataFetchingComponent;\nexport default DataFetchingComponent;\nvar _c;\n$RefreshReg$(_c, \"DataFetchingComponent\");","map":{"version":3,"names":["React","useState","useEffect","useParams","jsxDEV","_jsxDEV","DataFetchingComponent","_s","data","setData","loading","setLoading","error","setError","match","console","log","fetchData","response","fetch","ok","Error","result","json","message","children","fileName","_jsxFileName","lineNumber","columnNumber","map","item","index","name","_c","$RefreshReg$"],"sources":["C:/Personal/React Projects/flaerhome/my-frontend/src/components/BookDetails/index.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nconst DataFetchingComponent = () => {\r\n  const [data, setData] = useState([]); // State to hold the fetched data\r\n  const [loading, setLoading] = useState(true); // State to manage loading state\r\n  const [error, setError] = useState(null); // State to handle errors\r\n  const { match } = useParams();\r\n  console.log(match);\r\n\r\n  useEffect(() => {\r\n    // Define an async function to fetch data\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await fetch(\"https://api.example.com/data\"); // Replace with your API endpoint\r\n        if (!response.ok) {\r\n          throw new Error(\"Failed to fetch data\");\r\n        }\r\n        const result = await response.json(); // Parse the JSON data\r\n        setData(result); // Update the state with fetched data\r\n      } catch (error) {\r\n        setError(error.message); // Set error if fetch fails\r\n      } finally {\r\n        setLoading(false); // Set loading to false after data is fetched\r\n      }\r\n    };\r\n\r\n    fetchData(); // Call the fetch function when the component mounts\r\n  }, []); // The empty array ensures the effect runs only once (on component mount)\r\n\r\n  if (loading) return <div>Loading...</div>; // Show loading state\r\n  if (error) return <div>Error: {error}</div>; // Show error message\r\n\r\n  return (\r\n    <div>\r\n      <h1>Fetched Data</h1>\r\n      <ul>\r\n        {data.map((item, index) => (\r\n          <li key={index}>{item.name}</li> // Render the data (modify based on your API structure)\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DataFetchingComponent;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAElD,SAASC,SAAS,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7C,MAAMC,qBAAqB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClC,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EACtC,MAAM,CAACS,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EAC9C,MAAM,CAACW,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EAC1C,MAAM;IAAEa;EAAM,CAAC,GAAGX,SAAS,CAAC,CAAC;EAC7BY,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;EAElBZ,SAAS,CAAC,MAAM;IACd;IACA,MAAMe,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC,CAAC,CAAC;QAC9D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;UAChB,MAAM,IAAIC,KAAK,CAAC,sBAAsB,CAAC;QACzC;QACA,MAAMC,MAAM,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC,CAAC,CAAC;QACtCd,OAAO,CAACa,MAAM,CAAC,CAAC,CAAC;MACnB,CAAC,CAAC,OAAOV,KAAK,EAAE;QACdC,QAAQ,CAACD,KAAK,CAACY,OAAO,CAAC,CAAC,CAAC;MAC3B,CAAC,SAAS;QACRb,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;MACrB;IACF,CAAC;IAEDM,SAAS,CAAC,CAAC,CAAC,CAAC;EACf,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,IAAIP,OAAO,EAAE,oBAAOL,OAAA;IAAAoB,QAAA,EAAK;EAAU;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC,CAAC,CAAC;EAC3C,IAAIjB,KAAK,EAAE,oBAAOP,OAAA;IAAAoB,QAAA,GAAK,SAAO,EAACb,KAAK;EAAA;IAAAc,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAM,CAAC,CAAC,CAAC;;EAE7C,oBACExB,OAAA;IAAAoB,QAAA,gBACEpB,OAAA;MAAAoB,QAAA,EAAI;IAAY;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACrBxB,OAAA;MAAAoB,QAAA,EACGjB,IAAI,CAACsB,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,kBACpB3B,OAAA;QAAAoB,QAAA,EAAiBM,IAAI,CAACE;MAAI,GAAjBD,KAAK;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAiB,CAAC,CAAC;MAClC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEV,CAAC;AAACtB,EAAA,CAxCID,qBAAqB;EAAA,QAIPH,SAAS;AAAA;AAAA+B,EAAA,GAJvB5B,qBAAqB;AA0C3B,eAAeA,qBAAqB;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}